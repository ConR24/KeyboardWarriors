{"version":3,"sources":["resources/keyboardWarriorWhite.png","resources/keyboardWarriors.png","resources/badJob.png","components/Insult/Insult.tsx","util.ts","components/Timer/Timer.tsx","components/Finish/FinishModal.tsx","TypingPage/TypingPage.tsx","LandingPage/LandingPage.tsx","components/Leaderboard/Leaderboard.tsx","LeaderboardPage/LeaderboardPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","InsultState","Insult","state","this","props","tags","COMPLETE","text","UPCOMING","className","CURRENT","i","strikethrough","error","typedText","length","charAt","substring","React","Component","msToTimeString","ms","secs","Math","floor","slice","ceil","Timer","time","timeInMins","interval","setInterval","init","bind","tick","setState","newMils","clearInterval","FinishModal","name","sendStats","e","playerName","target","value","toUpperCase","params","method","headers","body","JSON","stringify","speed","Date","toLocaleDateString","fetch","Modal","show","Body","alt","src","bad","Row","Col","xs","Form","Control","placeholder","onChange","handleFormChange","to","Button","onClick","variant","TypingPage","_timer","currentInsult","isFinished","createRef","textChanged","currentText","currentTarget","insults","current","stop","Navbar","bg","Brand","href","process","logo","width","height","getTimeString","Number","join","getTime","toFixed","Container","ref","map","insult","index","key","LandingPage","document","title","kbWarriorsLogo","lg","span","offset","Leaderboard","records","generateLeaderboard","then","res","json","ranks","Player","record","Table","borderless","striped","responsive","LeaderboardPage","Image","App","testState","basename","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d6eef381.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/keyboardWarriorWhite.d6d9d913.png\";","module.exports = __webpack_public_path__ + \"static/media/keyboardWarriors.f043fd9d.png\";","module.exports = __webpack_public_path__ + \"static/media/badJob.81f452a9.png\";","import React from 'react';\nimport \"./Insult.css\";\n\nexport interface InsultProps {\n    text: string;\n    typedText: string;\n    state: InsultState;\n}\n\n// state indicating whether or not an insult has been typed yet\nexport enum InsultState {\n    COMPLETE,\n    CURRENT,\n    UPCOMING \n}\n\n// class representing an insult that a player is asked to type\nclass Insult extends React.Component<InsultProps, {state: InsultState}> {\n    render() {\n        const {state} = this.props;\n        let tags = <></>;\n        \n        switch(state) {\n            case(InsultState.COMPLETE): {\n                // strikethrough\n                tags = <div><s>{this.props.text}</s></div>;\n                break;\n            }\n            case(InsultState.UPCOMING): {\n                // greyed out\n                tags = <div className=\"greyed\">{this.props.text}</div>;\n                break;\n            }\n            case(InsultState.CURRENT): {\n                let strikethrough = \"\", error = \"\", i;\n                let {typedText, text} = this.props;\n\n                // loop over typed insult\n                for(i = 0; i < typedText.length; i++)\n                {\n                    // if difference, display error character and exit loop\n                    if(typedText.charAt(i) !== text.charAt(i))\n                    {\n                        error = text.charAt(i);\n                        i++;\n                        break;\n                    }\n                    else { // if correct, add to strikethrough\n                        strikethrough += text.charAt(i);\n                    }\n                }\n\n                // create tags\n                tags = <div className=\"orngBorder\">\n                    <b>\n                        <s>{strikethrough}</s>\n                        <span className={error === ' ' ? \"redSpace\" : \"red\"}>{error}</span>\n                        {text.substring(i)}\n                    </b>\n                </div>;\n                break;\n            }\n        }\n\n        return (\n            <div className=\"insult\">\n                {tags}\n            </div>\n        );\n    }\n}\n\nexport default Insult;\n","\nexport function msToTimeString(ms: number) {\n    let secs = Math.floor(ms / 100);\n    let mins = Math.floor(secs / 60);\n    let secStr = ('0' + (secs % 60)).slice(-2);\n    let milStr = ('0' + (Math.ceil((ms % 100) / 10) * 10)).slice(-2);\n\n    return \"\" + mins + \":\" + secStr + \":\" + milStr;\n}","import React from \"react\";\nimport \"./timer.css\";\nimport { msToTimeString } from \"../../util\";\n\nexport interface TimerProps {};\n\nexport interface TimerState {\n    time: number;\n    timeInMins: string;\n    interval: NodeJS.Timeout;\n};\n\n// Timer that tracks and displays time elapsed since it was created\nclass Timer extends React.Component<TimerProps, TimerState> {\n    constructor(props: TimerProps) {\n        super(props);\n\n        this.state = {\n            time: 0,\n            timeInMins: \"0:00:00\",\n            interval: setInterval(() => {}, 0)\n        };\n\n        this.init = this.init.bind(this);\n        this.tick = this.tick.bind(this);\n    }\n\n    componentDidMount() {\n        this.init();\n    }\n\n    // initialize interval for timer\n    init() {\n        this.setState ({ interval: setInterval(this.tick, 10) });\n    }\n\n    // increase the time of the timer and the timer label\n    tick() {\n        let newMils = this.state.time + 1;\n        \n        this.setState({\n            time: newMils, \n            timeInMins: msToTimeString(newMils)\n        });\n    }\n\n    // stop the timer\n    stop() {\n        clearInterval(this.state.interval);\n    }\n\n    // retrieve time elapsed\n    getTime() {\n        return this.state.time;\n    }\n\n    // retreive time elapsed in a nice format\n    getTimeString() {\n        return this.state.timeInMins;\n    }\n\n    render() {\n        return (\n            <div className=\"timer\">\n                <div className=\"time\">{this.state.timeInMins}</div>\n                <div className=\"timeLabel\">Time Elapsed</div>\n            </div>\n        );\n    }\n}\n\nexport default Timer;\n","import React from 'react';\nimport Modal from 'react-bootstrap/Modal'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport \"./FinishModal.css\";\nimport bad from \"../../resources/badJob.png\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from 'react-bootstrap/Button';\nimport {Link} from 'react-router-dom';\n\nexport interface FinishProps{\n    speed: number;\n    time: string;\n}\n\nexport interface FinishState{\n    name: string;\n}\n\nexport class FinishModal extends React.Component<FinishProps,FinishState> {\n    constructor(props: FinishProps){\n        super(props);\n\n        this.state = {\n            name: \"\"\n        };\n        \n        this.sendStats = this.sendStats.bind(this);\n    }\n\n    handleFormChange(e: any){\n        let playerName: string = e.target.value;\n        this.setState({\n            name: playerName.substring(0,3).toUpperCase(),\n        });\n    };\n\n    sendStats() {\n        const params: RequestInit = {\n            method: \"post\",\n            headers: {\"Content-Type\":\"application/json\"},\n            body: JSON.stringify({\n                \"name\": this.state.name,\n                \"time\": this.props.speed,\n                \"date string\": new Date().toLocaleDateString(\"en-US\")\n            })\n        }\n\n        fetch(\"/player\", params);\n    }\n    \n    render(){\n        return(\n            <Modal show={true}>\n                <Modal.Body>\n                    <img className=\"finish\"\n                        alt=\"Try harder.\"\n                        src={bad}                    \n                    ></img>\n                    <h1 className=\"try-harder\">Try Harder.</h1>\n                    <Row className=\"results\">\n                        <Col xs={6}>\n                            <h4 className=\"result-column\"><b>Speed:</b> {`${this.props.speed} char/sec`}</h4>\n                        </Col>\n                        <Col xs={6}>\n                            <h4 className=\"result-column\"><b>Time:</b> {this.props.time}</h4>\n                        </Col>\n                    </Row>\n                    <Row className=\"results\">\n                        <Col xs={6}>\n                            <Form.Control placeholder=\"Name\" onChange={(e: any) => this.handleFormChange(e)} value={this.state.name} />\n                        </Col>\n                        <Col xs={6}>\n                            <Link to=\"/leaderboard\">\n                                <Button onClick={this.sendStats} variant=\"primary\" className=\"submit-button\">Ok</Button>\n                            </Link>\n                        </Col>\n                    </Row>\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}","import React from \"react\";\nimport Insult, {InsultState} from \"../components/Insult/Insult\";\nimport Row from \"react-bootstrap/Row\";\nimport Container from \"react-bootstrap/Container\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Timer from \"../components/Timer/Timer\";\nimport { FinishModal } from \"../components/Finish/FinishModal\";\n\nimport logo from \"../resources/keyboardWarriorWhite.png\";\n\nimport \"./typingPage.css\";\n\nexport interface TypingProps {\n    insults: string[];\n}\n\nexport interface TypingState {\n    currentInsult: number;\n    typedText: string;\n    isFinished: boolean;\n}\n\n// game page where players type insults as quickly as possible\nclass TypingPage extends React.Component<TypingProps, TypingState> {\n    _timer: React.RefObject<Timer>;\n\n    constructor(props: TypingProps) {\n        super(props);\n\n        this.state = {\n            currentInsult: 0,\n            typedText: \"\",\n            isFinished: false\n        };\n\n        this._timer = React.createRef();\n        this.textChanged = this.textChanged.bind(this);\n    }\n\n    // handles change of text in text box\n    textChanged(e: React.FormEvent<HTMLInputElement>) {\n        const currentText = e.currentTarget.value;\n        const {currentInsult} = this.state;\n\n        this.setState({typedText: currentText});\n\n        // determine if insult is complete\n        if(currentText === this.props.insults[currentInsult]) {\n            this.setState({\n                currentInsult: currentInsult + 1,\n                typedText: \"\"\n            });\n\n            // stop timer if the last insult was completed\n            if(this.props.insults.length === currentInsult + 1) {\n                this._timer.current!.stop();\n                this.setState({\n                    isFinished: true,\n                });\n            }\n        }\n    }\n\n    render() {\n        const {currentInsult, typedText} = this.state;\n        \n        return (\n            <div>\n                <Navbar bg=\"dark\" variant=\"dark\">\n                    <Navbar.Brand href={process.env.PUBLIC_URL}>\n                        <img\n                            alt=\"Keyboard Warriors\"\n                            src={logo}\n                            width=\"30\"\n                            height=\"30\"\n                            className=\"d-inline-block align-top\"\n                        />{' '}\n                        Keyboard Warriors\n                    </Navbar.Brand>\n                </Navbar>\n                {/* Calculate typing speed by joining array into string and dividing it by time */}\n                {this.state.isFinished && <FinishModal \n                    time={this._timer.current!.getTimeString()} \n                    speed={Number((this.props.insults.join().length / (this._timer.current!.getTime() / 100)).toFixed(2))} \n                />}\n                <Container className=\"typing-container\">\n                    <Timer ref={this._timer}/>\n                    {this.props.insults.map((insult, index) => {\n                        let state = (index < currentInsult ? InsultState.COMPLETE \n                            : (index === currentInsult ? InsultState.CURRENT : InsultState.UPCOMING));\n                        return <Insult key={insult} text={insult} state={state} typedText={typedText} />\n                    })}\n                    <Row className=\"justify-content-md-center input-box\">\n                        <input onChange={this.textChanged} value={typedText} />\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default TypingPage;\n","import React from \"react\";\nimport kbWarriorsLogo from \"../resources/keyboardWarriors.png\";\nimport Button from \"react-bootstrap/Button\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport {Link} from 'react-router-dom';\nimport \"./index.css\";\n\nexport class LandingPage extends React.Component {\n\n  componentDidMount() {\n    document.title = \"Keyboard Warriors\";\n  }\n\n  render() {\n    return (\n      <Container className=\"landing-container\">\n        <img className=\"logo\" src={kbWarriorsLogo} alt=\"A black and orange helmet\"/>\n        <h1 className=\"title\">Keyboard Warriors</h1>\n        <Row className=\"justify-content-md-center button-row\">\n          <Col xs={3} lg={2}>\n            <Link to=\"/fight\">\n              <Button className=\"fight-button landing-button\" variant=\"primary\">\n                Fight!\n              </Button>\n            </Link>\n          </Col>\n          <Col xs={{span: 3, offset: 1}} lg={{span: 2, offset: 1}}>\n            <Link to=\"/leaderboard\">\n              <Button className=\"leaderboard-button landing-button\" variant=\"primary\">\n                Leaderboard\n              </Button>\n            </Link>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n","import React from 'react';\nimport './Leaderboard.css';\nimport Table from 'react-bootstrap/Table';\n\nexport interface LeaderboardProps {}\n\nexport interface LeaderboardState {\n    records: Array<Record>;\n}\n\nexport interface Record {\n    name: string;\n    time: number;\n}\n\nexport class Leaderboard extends React.Component<LeaderboardProps, LeaderboardState> {\n    constructor(props: LeaderboardProps) {\n        super(props);\n\n        this.state = {\n            records: []\n        };\n\n        this.generateLeaderboard = this.generateLeaderboard.bind(this);\n    }\n\n    componentDidMount() {\n        fetch('/leaderboard')\n            .then(res => res.json())\n            .then(ranks => {\n                this.setState({records: ranks.Player});\n            });\n    }\n\n    generateLeaderboard() {\n        return this.state.records.map((record, index) => {\n            return (\n            <tr key={record.name + record.time}>\n                <td>{ index + 1 }</td>\n                <td>{ record.name }</td>\n                <td>{ record.time + \" char/sec\" }</td>\n            </tr>) \n         });\n    }\n\n\n    render() {\n      return (\n          <div className=\"leaderboard-container\">\n              <h2 className=\"leaderboard-title\">Leaderboard</h2>\n              <div className=\"leaderboard-table\">\n                <Table borderless striped responsive=\"sm\">\n                    <thead>\n                        <tr>\n                            <th>Rank</th>\n                            <th>Initials</th>\n                            <th>Time</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.generateLeaderboard()}\n                    </tbody>\n                </Table>\n              </div>\n          </div>\n      );\n    }\n  }","import React from 'react';\nimport kbWarriorsLogo from \"../resources/keyboardWarriorWhite.png\";\nimport { Leaderboard } from '../components/Leaderboard/Leaderboard';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Image from 'react-bootstrap/Image';\n\nimport logo from \"../resources/keyboardWarriors.png\";\n\nimport './LeaderboardPage.css';\n\nexport class LeaderboardPage extends React.Component {\n    render() {\n      return (\n        <div>\n          <div className=\"leaderboard-page-header\">\n            <Navbar bg=\"dark\" variant=\"dark\">\n              <Navbar.Brand href={process.env.PUBLIC_URL}>\n                <img\n                  alt=\"Keyboard Warriors\"\n                  src={kbWarriorsLogo}\n                  width=\"30\"\n                  height=\"30\"\n                  className=\"d-inline-block align-top\"\n                />{' '}\n                Keyboard Warriors\n              </Navbar.Brand>\n            </Navbar>\n          </div>\n          <div className=\"leaderboard-page-content\">\n            <Image className=\"background-logo\" src={logo} alt=\"A black and orange helmet\" />\n            <Leaderboard/>\n          </div>\n        </div>  \n      );\n    }\n  }","import React from 'react';\nimport './App.css';\nimport TypingPage from \"./TypingPage/TypingPage\";\nimport {LandingPage} from \"./LandingPage/LandingPage\";\nimport {LeaderboardPage} from \"./LeaderboardPage/LeaderboardPage\";\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\n\ninterface MyProps {};\ninterface MyState {\n  testState: string,\n  insults: string[],\n};\n\nclass App extends React.Component<MyProps, MyState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      testState: \"save\",\n      insults: [],\n    }\n  }\n\n  componentDidMount() {\n    fetch('/insults')\n      .then(res => res.json())\n      .then(insults => {\n          this.setState({insults: insults});\n      });\n  }\n\n  render(): JSX.Element {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          \n        </header>\n        <Router basename={process.env.PUBLIC_URL}>\n          <Switch>\n            <Route exact path={'/'}>\n              <LandingPage />\n            </Route>\n            <Route exact path={'/fight'}>\n              <TypingPage insults={this.state.insults} />\n            </Route>\n            <Route exact path={'/leaderboard'}>\n              <LeaderboardPage />\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}